name: Terraform AWS Workflow

on:
  workflow_call:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      tfpath:
        description: 'TF File Path'     
        required: false
        default: 'iac'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tf_code_check:
    name: Terraform Validation and Build
    runs-on: ubuntu-latest

    if:  ${{ inputs.tfpath }} 
    steps:
    - name: Checkout tf code in runner environment
      uses: actions/checkout@v3.5.2

    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Configure Terraform Environment Variables
      run: |
          echo "TF_VAR_cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
          echo "TF_VAR_cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_cloudflare_account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> $GITHUB_ENV

    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2.0.2

    - name: Terraform init and validate
      run: |
        echo `pwd`
        echo "tfpath ${{ github.event.inputs.tfpath }}"
        echo "** Running Terraform Init**"
        terraform init
        
        echo "** Running Terraform Validate**"
        terraform validate
      working-directory: ${{ github.event.inputs.tfpath }}
    - name: Terraform dependency provisioning
      run: |
        echo `pwd`
        echo "tfpath ${{ github.event.inputs.tfpath }}"        
        echo "** Provisioning SSL cert **"
        terraform apply -target="module.acm" -auto-approve
        
        echo "** Validating SSL cert **"
        terraform apply -target="module.zone" -auto-approve
      working-directory: ${{ github.event.inputs.tfpath }}
  wait_for_ssl:
    name: Wait for SSL Certificate Issuance
    runs-on: ubuntu-latest
    needs: [tf_code_check]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
    
      - name: Get ACM Certificate ARN
        id: get_acm_arn
        run: echo "::set-output name=arn::$(terraform output -raw module.acm.acm_certificate_arn)"

      - name: Poll for ACM Certificate Issuance
        run: |
          # Polling interval in seconds
          poll_interval=300  # Adjust as needed
          
           while true; do
             # Query ACM certificate description
             certificate_status=$(aws acm describe-certificate --certificate-arn ${{ steps.get_acm_arn.outputs.arn }} --query 'Certificate.Status' --output text)
             
             if [ "$certificate_status" == "ISSUED" ]; then
              # Certificate is issued, set an environment variable
               echo "CERTIFICATE_ISSUED=true" >> $GITHUB_ENV
               break
             else
              echo "Certificate not yet issued, waiting..."
              sleep $poll_interval
            fi
          done
  final_terraform:
    name: Final Terraform Plan and Apply
    runs-on: ubuntu-latest
    needs: [wait_for_ssl]
    steps:
      - name: Checkout tf code in runner environment
        uses: actions/checkout@v3.5.2

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2

      - name: Terraform init and validate
        run: |
          echo `pwd`
          echo "tfpath ${{ github.event.inputs.tfpath }}"
          echo "** Running Terraform Init**"
          terraform init
          
          echo "** Running Terraform Validate**"
          terraform validate
        working-directory: ${{ github.event.inputs.tfpath }}
      
      - name: Conditional Terraform Plan and Apply
        run: |
          echo `pwd`
          echo "tfpath ${{ github.event.inputs.tfpath }}"
          echo "** Running Terraform Plan**"
          terraform plan
          
          # Check if the SSL certificate is issued
          if [ "$CERTIFICATE_ISSUED" == "true" ]; then
            echo "** Running Terraform Apply**"
            terraform apply -auto-approve
          else
            echo "Waiting for SSL certificate to be issued..."
          fi
        working-directory: ${{ github.event.inputs.tfpath }}